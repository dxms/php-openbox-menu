#!/usr/bin/env php
<?php ini_set('default_charset', 'UTF-8');
/**			PHP Openbox MENU GENERATOR
 *
 *
 * Author: Spooky, spookycorp.com
 * Created @ 05:20 01.10.2016
 * Licence: 
 * 		This file is restricted as much as openbox is. 
 * 		Go figure.
 *
 * */

# Home directory
define('HOME', $_SERVER['HOME']);

# ID menu *(prefix/basename)
define('MENU_FILE_ID', 'PHP-OBmenu');

# Terminal for CLI ConsoleOnly category applications
define('consoleOnly', 'x-terminal-emulator -e'); # or: 'terminator -e'

# Chop dir
$after_home = '/.config/openbox/';

$menu_file = ( ## 		Menu file path
	HOME . 				# 	<-- would you change this .. ?
	$after_home . 		# 	It doesn't need to be in '/.config/openbox/' ..
	MENU_FILE_ID . 		# 	Look up.
	'.xml' 				# 	<-- Leave as is.
);

# Uncomment '$exit .=*' line  to make exit, reboot, poweroff commands appear at the bottom of the menu
# Good for tint2 start menu usage.

$exit = null;
#$exit .= base64_decode('PHNlcGFyYXRvciAvPiA8bWVudSBpZD0iZXhpdC1tZW51IiBsYWJlbD0iLS0iPiA8aXRlbSBsYWJlbD0iRXhpdCI+IDxhY3Rpb24gbmFtZT0iRXhlY3V0ZSI+IDxjb21tYW5kPm9wZW5ib3ggLS1leGl0PC9jb21tYW5kPiA8L2FjdGlvbj4gPC9pdGVtPiA8aXRlbSBsYWJlbD0iU2h1dGRvd24iPiA8YWN0aW9uIG5hbWU9IkV4ZWN1dGUiPiA8Y29tbWFuZD5zeXN0ZW1jdGwgcG93ZXJvZmY8L2NvbW1hbmQ+IDwvYWN0aW9uPiA8L2l0ZW0+IDxpdGVtIGxhYmVsPSJSZXN0YXJ0Ij4gPGFjdGlvbiBuYW1lPSJFeGVjdXRlIj4gPGNvbW1hbmQ+c3lzdGVtY3RsIHJlYm9vdDwvY29tbWFuZD4gPC9hY3Rpb24+IDwvaXRlbT4gPC9tZW51Pg==');

if (is_file($menu_file))
{
	$fmemtime = filemtime($menu_file);
	if (($fmemtime + 60) > time())
	{
		$menu = file_get_contents($menu_file);
	}
}

if (isset($menu))
{
	echo($menu);
	exit;
}
else
{
	function loc () ## Locations to search for .desktop files
	{	# Add as many as necessary
		return([
			0 => HOME . '/.local/share/applications',
			1 => '/usr/share/applications',
			2 => '/usr/local/share/applications',
		]);
	}

	function keys ()
	{	## No other than these is necessity
		return(['Categories', 'Name', 'Exec']);
	}

	function PHP_OPENBOX_MENU()
	{	## Generates xml pipe-menu

		function collected()
		{	## Create array with collected desktop files

			$pack = [];
			foreach (loc() as $path)
			{
				if (is_dir($path))
				{
					if (!isset($pack["$path"]))
					$pack["$path"]=[];

					$scan = array_slice(scandir($path),2);
					foreach ($scan as $n=>$file)
					{
						$suspect = ("{$path}/{$scan[$n]}");
						if (is_file($suspect))
						{
							$extract = pathinfo($suspect);
							if ($extract['extension'] === 'desktop')
							$pack["$path"][]=$extract['filename'];
							unset($suspect, $extract);
						}
						unset($file, $n);
					}
					unset($scan);
				}
				unset($path);
			}

			return($pack);
		}

		function structure()
		{	# Loop over each file,
			# extract required lines,
			# arrange all that

			$f = keys();
			$forXml = [];

			foreach (collected() as $dir => $array)
			{
				foreach ($array as $descriptor)
				{
					$file = ("{$dir}/{$descriptor}.desktop");
					$file = @parse_ini_file($file, true, INI_SCANNER_RAW);

					if (isset($file['Desktop Entry']))
					{
						$file = $file['Desktop Entry'];
						foreach ($file as $a)
						{
							if(isset ($file[$f[0]]))
							{
								$atv = (MENU_FILE_ID ."-{$file[$f[0]]}");
								if (!isset($forXml[$atv])) $forXml[$atv]=[];
								if (is_string($file[$f[1]])) $name = $file[$f[1]];
								else
								{
									$e = explode(' ', $file[$f[2]]);
									$name = str_replace( '-',' ', basename($e[0]));
									unset($e);
								}

								$n = ucfirst($name);
								$forXml[$atv][$n] = $file[$f[2]];
								unset($name, $n);
							}
							unset($a);
						}
					} else unset($file, $descriptor);
					unset($file, $descriptor);
				} unset($array, $dir);
			}

			ksort($forXml);
			return($forXml);
		}

		function toXml()
		{	## Create XMl

			global $exit; $xml = null;
			$structure = structure();

			foreach ($structure as $category_id => $scope)
			{
				$e = explode('-', $category_id);
				$label = (((count($e) > 3)) ? implode('-', array_slice($e,2)):$e[2]);
				$xml.=('<menu id="'.$category_id.'" label="'.$label.'"> ');

				foreach ($scope as $name => $command)
				{
					$command = str_replace([' %U',' %u',' %F',' %f'], '', $command);
					if ($label === 'ConsoleOnly') $command = (consoleOnly.' '.$command);
					$xml.=(
						'<item label="'.$name.'"> '.
							'<action name="Execute"> '.
								'<execute>'.$command.'</execute> '.
							'</action> '.
						'</item> '
					);
				}

				$xml.=('</menu> ');
			}

			unset($structure);
			return(
				'<openbox_pipe_menu> '.
					$xml. $exit.
				'</openbox_pipe_menu> '
			);
		}

		return(toXml());
	}

	$menu = PHP_OPENBOX_MENU();
	file_put_contents($menu_file, $menu, LOCK_EX);
	echo($menu);
	exit;
}
